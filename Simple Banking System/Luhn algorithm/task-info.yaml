type: edu
files:
- name: banking/banking.py
  visible: true
  text: |
    # Write your code here
    # pseudo menu part.
    import random


    class Card():
        data = {}

        def __init__(self, card_no, card_pin):  # here the key will be card no :
            self.card_no = card_no
            self.card_pin = card_pin
            self.balance = 0
            Card.data[card_no] = [self.card_pin, self.balance]

        def login(user_card_no, user_card_pin):
            if len(user_card_no) == 16 and len(user_card_pin) == 4:

                if user_card_no in Card.data.keys():
                    #print((Card.data[user_card_no][0]))
                    if Card.data[user_card_no][0] == user_card_pin:
                        return True
                    else:
                        return False
                else:
                    return False
            else:
                return False

        def balance_check(card_no):
            return Card.data[user_card_no][1]


    def n_len_rand(len_, floor=1):
        top = 10**len_
        if floor > top:
            raise ValueError(f"Floor {floor} must be less than requested top {top}")
        return f'{random.randrange(floor, top):0{len_}}'


    menu1 = '''1. Create an account
    2. Log into account
    0. Exit'''
    menu2 = '''1. Balance
    2. Log out
    0. Exit'''
    flag = True
    while (flag == True):
        print(menu1)
        in1 = int(input())
        if in1 == 1:

            #creating a random acc. no and PIN :
            a = random.randint(0000000000, 9999999999)
            rand_no = str(4000000000000000 + a)
            rand_pin = n_len_rand(4)


            new = Card(rand_no,rand_pin)  # calling card class constructor for card creation with attributes as randon to be generated kater in code.
            print("Your card has been created")
            print("Your card number:")
            print(new.card_no)
            print("Your card PIN")
            print(new.card_pin)

        if in1 == 2:
            print("Enter your card number:")
            user_card_no = input()
            print("Enter you PIN:")
            user_card_pin = input()
            # check using the login function of class card and return a flag.
            login_flag = Card.login(user_card_no, user_card_pin)
            if login_flag == False:
                print("Wrong card number or PIN!")
                continue
            print("You have successfully logged in!")
            while (login_flag == True):

                print(menu2)
                in2 = int(input())
                if in2 == 1:
                    # check balance using balance function of card class.
                    # print(balance)
                    print("Balance: 0")
                if in2 == 2:
                    login_flag = False
                    print("You have succesfully logged out")
                if in2 == 0:
                    flag = False
                    print("Bye!")
                    break
        if in1 == 0:
            print("Bye!")
            flag = False
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.exceptions import WrongAnswerException
    from hstest.test_case import CheckResult
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    import random
    import re

    card_number = ''
    pin = ''
    are_all_inputs_read = False


    def get_credentials(output: str):
        number = re.findall(r'400000\d{10}', output, re.MULTILINE)
        if not number:
            raise WrongAnswerException('You are printing the card number incorrectly. '
                                       'The card number should look like in the example: 400000DDDDDDDDDD,'
                                       ' where D is a digit.\nMake sure the card number is 16-digit length and '
                                       'you don\'t print any extra spaces at the end of the line!')

        PIN = re.findall(r'^\d{4}$', output, re.MULTILINE)
        if not PIN:
            raise WrongAnswerException('You are printing the card PIN incorrectly. '
                                       'The PIN should look like in the example: DDDD, where D is a digit.\n'
                                       'Make sure the PIN is 4-digit length and you don\'t print any extra spaces at the'
                                       ' end of the line!')

        return number[0], PIN[0]


    def test_card_generation(output: str, value_to_return):
        global card_number, pin, are_all_inputs_read
        are_all_inputs_read = False
        credentials = get_credentials(output)
        card_number = credentials[0]
        pin = credentials[1]
        return value_to_return


    def test_difference_between_generations(output: str, value_to_return):
        global card_number, pin, are_all_inputs_read
        credentials = get_credentials(output)
        another_card_number = credentials[0]

        if another_card_number == card_number:
            return CheckResult.wrong('Your program generates two identical card numbers!')
        are_all_inputs_read = True

        return value_to_return


    def test_sign_in_with_correct_credentials(output: str, value_to_return):
        global card_number, pin
        return '{}\n{}'.format(card_number, pin)


    def test_output_after_correct_sign_in(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'successfully' not in output.lower():
            return CheckResult.wrong(
                'There is no \'successfully\' in your output after signing in with correct credentials')
        return value_to_return


    def test_sign_in_with_wrong_pin(output: str, value_to_return):
        global card_number, pin
        wrong_pin = pin
        while pin == wrong_pin:
            wrong_pin = ''.join(list(map(str, random.sample(range(1, 10), 4))))
        return '{}\n{}\n'.format(card_number, wrong_pin)


    def test_output_after_wrong_pin(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'wrong' not in output.lower():
            return CheckResult.wrong(
                'There is no \'wrong\' in your output after signing in with incorrect credentials')
        return value_to_return


    def test_sign_in_with_wrong_card_number(output: str, value_to_return):
        global card_number, pin
        wrong_card_number = card_number
        while wrong_card_number == card_number:
            temp = [4, 0, 0, 0, 0, 0]
            for _ in range(10):
                temp.append(random.randint(1, 9))
            wrong_card_number = ''.join(list(map(str, temp)))
        return '{}\n{}\n'.format(wrong_card_number, pin)


    def test_output_after_wrong_card_number(output: str, value_to_return):
        global are_all_inputs_read
        are_all_inputs_read = True
        if 'wrong' not in output.lower():
            return CheckResult.wrong(
                'There is no \'wrong\' in your output after signing in with incorrect credentials')
        return value_to_return


    def is_passed_luhn_algorithm(number):
        luhn = [int(char) for char in str(number)]
        for i, num in enumerate(luhn):
            if (i + 1) % 2 == 0:
                continue
            temp = num * 2
            luhn[i] = temp if temp < 10 else temp - 9
        return sum(luhn) % 10 == 0


    def test_luhn_algorithm(output: str, correct_num_of_cards):
        global are_all_inputs_read

        numbers = re.findall(r'400000\d{10,}', output, re.MULTILINE)

        for number in numbers:
            if len(number) != 16:
                return CheckResult.wrong(f'Wrong card number \'{number}\'. The card number should be 16-digit length.')
            if not is_passed_luhn_algorithm(number):
                return CheckResult.wrong('The card number \'{}\' doesn\'t pass luhn algorithm!'.format(number))

        if len(numbers) != correct_num_of_cards:
            return CheckResult.wrong(
                f'After creating {correct_num_of_cards} cards, found {len(numbers)} cards with correct format\n'
                f'The card number should be 16-digit length and should start with 400000.')

        are_all_inputs_read = True
        return '0'


    class BankingSystem(StageTest):

        def generate(self):
            return [
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '1'),
                        lambda output: test_difference_between_generations(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_correct_credentials(output, None),
                        lambda output: test_output_after_correct_sign_in(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_wrong_pin(output, None),
                        lambda output: test_output_after_wrong_pin(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1',
                        lambda output: test_card_generation(output, '2'),
                        lambda output: test_sign_in_with_wrong_card_number(output, None),
                        lambda output: test_output_after_wrong_card_number(output, '0')
                    ]),
                TestCase(
                    stdin=[
                        '1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1',
                        lambda output: test_luhn_algorithm(output, 11),
                    ])
            ]

        def check(self, reply: str, attach) -> CheckResult:
            if are_all_inputs_read:
                return CheckResult.correct()
            else:
                return CheckResult.wrong('You didn\'t read all inputs!')


    if __name__ == '__main__':
        BankingSystem('banking.banking').run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/109/stages/592/implement
status: Solved
record: 1
